"""
Django settings for vickerdentstudios project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
import dj_database_url
from pathlib import Path
from decouple import config, Csv
# from tailwind_watcher import run_tailwind_watch # You'll need to change this to point to your tailwind_watcher file.

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY", default=")fi9e3+o-46(h9@1cutd4+jshbnw+$%5lqd*$fe^bou0+k&a%i")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG", default=True, cast=bool)

ALLOWED_HOSTS = config("ALLOWED_HOSTS", default="127.0.0.1,localhost", cast=Csv())

# Application definition
INSTALLED_APPS = [
    "whitenoise.runserver_nostatic",
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'the_messages',
    'compressor',
    'django_backblaze_b2',
    'webpush',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'vickerdentstudios.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',
            ],
        },
    },
]

WSGI_APPLICATION = 'vickerdentstudios.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': dj_database_url.config(
        default=str(config("POSTGRES_URI", default="postgres://postgres:QwertyAsdf@127.0.0.1:5432/postgres")),
        conn_max_age=600,
        conn_health_checks=True,
    )
}

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://127.0.0.1:6379/1',  # Use the appropriate Redis server URL
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    },
    # add a cache via db table or memcached that can be accessed from multiple threads. I'll just use redis
    "django-backblaze-b2": {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://127.0.0.1:6379/2',
    }
}

# Optional: This is to ensure Django sessions are stored in Redis
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'

# Backblaze B2 Configuration
USE_CLOUD_STORAGE = config("USE_CLOUD_STORAGE", default=False, cast=bool)

BACKBLAZE_CONFIG = {
    # however you want to securely retrieve these values
    "application_key_id": config("BACKBLAZE_APPLICATION_KEY_ID"),
    "application_key": config("BACKBLAZE_APPLICATION_KEY"),
    "bucket": config("BACKBLAZE_BUCKET"),
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# ==============================================================================
# SECURITY SETTINGS
# ==============================================================================
# Note that when you use LOGGING, commandline doesn't throw up anything anymore,
# or give you hints as to where you're at

CSRF_TRUSTED_ORIGINS = config("CSRF_ORIGIN", default="http://127.0.0.1,http://localhost", cast=Csv())

if not DEBUG:
    CSRF_COOKIE_SECURE = True

    SECURE_HSTS_SECONDS = 60 * 60 * 24 * 7 * 52  # one year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    # SECURE_SSL_REDIRECT = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
    USE_X_FORWARDED_HOST = True
    SESSION_COOKIE_SECURE = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STORAGES = {
    # ...
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, "static")

COMPRESS_ROOT = os.path.join(BASE_DIR, "static")

COMPRESS_ENABLED = True

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'compressor.finders.CompressorFinder',
)

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ==============================================================================
# EMAIL SETTINGS
# ==============================================================================
EMAIL_HOST = "smtp.gmail.com"
EMAIL_HOST_USER = config("EMAIL_SENDER")
EMAIL_HOST_PASSWORD = config("EMAIL_PASSWORD")
EMAIL_PORT = 465
SERVER_EMAIL = config("EMAIL_SENDER")
EMAIL_USE_SSL = True

ADMINS = [("Victor", "vickerdent@gmail.com"),]
MANAGERS = [("Victor", "vickerdent@gmail.com"),]


# ==============================================================================
# NOTIFICATIONS SETTINGS
# ==============================================================================
WEBPUSH_SETTINGS = {
    "VAPID_PUBLIC_KEY": config("WEB_PUSH_PUBLIC"),
    "VAPID_PRIVATE_KEY": config("WEB_PUSH_PRIVATE"),
    "VAPID_ADMIN_EMAIL": "vickerdent@gmail.com"
}

# if DEBUG:  # We only need to run the watcher in development (given reasons mentioned in the guide).
#     run_tailwind_watch()
